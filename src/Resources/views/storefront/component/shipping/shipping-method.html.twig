{% sw_extends '@Storefront/storefront/component/shipping/shipping-method.html.twig' %}

{% block component_shipping_method_label %}
    {{ parent() }}

    {% set technicalName = null %}

    {% if context.shippingMethod.customFields.technical_name is not empty %}
        {% set technicalName = context.shippingMethod.customFields.technical_name %}
    {% endif %}

    {% if context.shippingMethod.translated.customFields.technical_name is not empty %}
        {% set technicalName = context.shippingMethod.translated.customFields.technical_name %}
    {% endif %}

    {% if (shipping.id is same as(context.shippingMethod.id)) and technicalName == constant('BitBag\\ShopwareInPostPlugin\\Factory\\ShippingMethodPayloadFactoryInterface::SHIPPING_KEY') %}
        {% if page.extensions[constant('BitBag\\ShopwareInPostPlugin\\Config\\InPostConfigServiceInterface::SYSTEM_CONFIG_PREFIX')]['inPostEnvironment'] == constant('BitBag\\ShopwareInPostPlugin\\Api\\WebClientInterface::PRODUCTION_ENVIRONMENT') %}
            <link rel="stylesheet" href="https://geowidget.inpost.pl/inpost-geowidget.css"/>
            <script src="https://geowidget.inpost.pl/inpost-geowidget.js" defer></script>
        {% else %}
            <link rel="stylesheet" href="https://sandbox-easy-geowidget-sdk.easypack24.net/inpost-geowidget.css"/>
            <script src="https://sandbox-easy-geowidget-sdk.easypack24.net/inpost-geowidget.js"></script>
        {% endif %}

        <div class="inpostPoint hide" data-inpost-plugin-selectedPoint>
            <div class="inpostDetails">
                <img class="image" data-inpost-plugin-thumbnail/>
                <div class="detailsContainer">
                    <b class="item" data-inpost-plugin-name></b>
                    <p class="item" data-inpost-plugin-addressOne></p>
                    <p class="item" data-inpost-plugin-addressTwo></p>
                </div>
            </div>

            <button class="btn btn-primary" data-inpost-plugin-changePoint>{{ 'pointName.changePoint'|trans }}</button>
        </div>

        <div class="data-inpost-plugin-map-container" data-inpost-plugin-map>
            <inpost-geowidget onpoint="afterPointSelected"
                              token="{{ page.extensions[constant('BitBag\\ShopwareInPostPlugin\\Config\\InPostConfigServiceInterface::SYSTEM_CONFIG_PREFIX')]['inPostWidgetToken'] }}"
                              language="pl"
                              config="parcelCollect"></inpost-geowidget>
        </div>

        <p class="error-message hide point-name-not-selected-message">{{ 'pointName.notFound'|trans }}</p>

        <input type="hidden" id="inpost-parcel-locker" name="customParcelLockerField" form="confirmOrderForm">
        <script>
            function InPostPlugin() {
                this.init = function () {
                    window.afterPointSelected = this.updateSelected;

                    const changePointButton = document.querySelector('[data-inpost-plugin-changePoint]');
                    changePointButton.addEventListener('click', (e) => {
                        e.preventDefault();
                        this.changePoint();
                    });

                    const confirmFormSubmitButtonEl = document.getElementById('confirmFormSubmit');
                    if (confirmFormSubmitButtonEl) {
                        confirmFormSubmitButtonEl.addEventListener('click', (e) => {
                            const pointNameNotSelectedMessageEl = document.querySelector('.point-name-not-selected-message');

                            const inPostParcelLockerEl = document.getElementById('inpost-parcel-locker');
                            if (!inPostParcelLockerEl || (inPostParcelLockerEl && !inPostParcelLockerEl.value)) {
                                e.preventDefault();

                                document.querySelector('.shipping-methods').scrollIntoView({
                                    behavior: 'smooth'
                                });

                                if (pointNameNotSelectedMessageEl) {
                                    pointNameNotSelectedMessageEl.classList.remove('hide');
                                }
                            } else {
                                if (pointNameNotSelectedMessageEl) {
                                    pointNameNotSelectedMessageEl.classList.add('hide');
                                }
                            }
                        });
                    }
                };

                this.updateSelected = function (point) {
                    const inPostParcelLockerEl = document.querySelector('#inpost-parcel-locker');
                    inPostParcelLockerEl.value = point.name;

                    const selectedPoint = document.querySelector('[data-inpost-plugin-selectedPoint]');
                    selectedPoint.classList.remove('hide');

                    const inPostGeoMap = document.querySelector('[data-inpost-plugin-map]');
                    inPostGeoMap.classList.add('hide');

                    const pointThumbnail = document.querySelector('[data-inpost-plugin-thumbnail]');
                    pointThumbnail.src = point.image_url;

                    const pointName = document.querySelector('[data-inpost-plugin-name]');
                    pointName.innerText = point.name;

                    const pointAddressOne = document.querySelector('[data-inpost-plugin-addressOne]');
                    pointAddressOne.innerText = point.address.line1;

                    const pointAddressTwo = document.querySelector('[data-inpost-plugin-addressTwo]');
                    pointAddressTwo.innerText = point.address.line2;

                    const pointNameNotSelectedMessageEl = document.querySelector('.point-name-not-selected-message');
                    if (pointNameNotSelectedMessageEl) {
                        pointNameNotSelectedMessageEl.classList.add('hide');
                    }
                };

                this.changePoint = function () {
                    const selectedPoint = document.querySelector('[data-inpost-plugin-selectedPoint]');
                    selectedPoint.classList.add('hide');

                    const inPostGeoMap = document.querySelector('[data-inpost-plugin-map]');
                    inPostGeoMap.classList.remove('hide');
                };
            }

            const inPostPlugin = new InPostPlugin();
            inPostPlugin.init();

        </script>
    {% endif %}
{% endblock %}
